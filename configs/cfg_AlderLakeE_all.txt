# Based on https://raw.githubusercontent.com/intel/perfmon/refs/heads/main/ADL/events/alderlake_gracemont_core.json (Version: 1.33)
# Applies to processors with family-model in {6-97, 6-9A, 6-B7, 6-BA, 6-BF, 6-BE}

# Counts the number of retired loads that are blocked because its address exactly matches an older store whose data is not ready.
03.01 LD_BLOCKS.DATA_UNKNOWN

# Counts the number of retired loads that are blocked because it initially appears to be store forward blocked, but subsequently is shown not to be blocked based on 4K alias check.
03.04 LD_BLOCKS.ADDRESS_ALIAS

# Counts the number of cycles that uops are blocked due to a store buffer full condition.
04.01 MEM_SCHEDULER_BLOCK.ST_BUF

# Counts the number of cycles that uops are blocked due to a load buffer full condition.
04.02 MEM_SCHEDULER_BLOCK.LD_BUF

# Counts the number of cycles that uops are blocked due to an RSV full condition.
04.04 MEM_SCHEDULER_BLOCK.RSV

# Counts the number of cycles that uops are blocked for any of the following reasons:  load buffer, store buffer or RSV full.
04.07 MEM_SCHEDULER_BLOCK.ALL

# Counts the number of cycles that the head (oldest load) of the load buffer and retirement are both stalled due to a DL1 miss.
05.81 LD_HEAD.L1_MISS_AT_RET

# Counts the number of cycles that the head (oldest load) of the load buffer and retirement are both stalled due to a store address match.
05.84 LD_HEAD.ST_ADDR_AT_RET

# Counts the number of cycles that the head (oldest load) of the load buffer and retirement are both stalled due to a DTLB miss.
05.90 LD_HEAD.DTLB_MISS_AT_RET

# Counts the number of cycles that the head (oldest load) of the load buffer and retirement are both stalled due to a pagewalk.
05.A0 LD_HEAD.PGWALK_AT_RET

# Counts the number of cycles that the head (oldest load) of the load buffer and retirement are both stalled due to other block cases.
05.C0 LD_HEAD.OTHER_AT_RET

# Counts the number of cycles that the head (oldest load) of the load buffer is stalled due to a core bound stall including a store address match, a DTLB miss or a page walk that detains the load from retiring.
05.F4 LD_HEAD.L1_BOUND_AT_RET

# Counts the number of cycles that the head (oldest load) of the load buffer is stalled due to any number of reasons, including an L1 miss, WCB full, pagewalk, store address block or store data block, on a load that retires.
05.FF LD_HEAD.ANY_AT_RET

# Counts the number of page walks completed due to load DTLB misses to any page size.
08.0E DTLB_LOAD_MISSES.WALK_COMPLETED

# Counts the number of uops issued by the front end every cycle.
0E.00 UOPS_ISSUED.ANY

# Counts the total number of L2 Cache accesses. Counts on a per core basis.
24.00 L2_REQUEST.ALL

# Counts the number of L2 Cache accesses that resulted in a miss. Counts on a per core basis.
24.01 L2_REQUEST.MISS

# Counts the number of L2 Cache accesses that resulted in a hit. Counts on a per core basis.
24.02 L2_REQUEST.HIT

# Counts the number of cacheable memory requests that miss in the LLC. Counts on a per core basis.
2E.41 LONGEST_LAT_CACHE.MISS

# Counts the number of cacheable memory requests that access the LLC. Counts on a per core basis.
2E.4F LONGEST_LAT_CACHE.REFERENCE

# Counts the number of cycles the core is stalled due to a demand load which hit in the L2 cache.
34.01 MEM_BOUND_STALLS.LOAD_L2_HIT

# Counts the number of cycles the core is stalled due to a demand load which hit in the LLC or other core with HITE/F/M.
34.02 MEM_BOUND_STALLS.LOAD_LLC_HIT

# Counts the number of cycles the core is stalled due to a demand load miss which hit in DRAM or MMIO (Non-DRAM).
34.04 MEM_BOUND_STALLS.LOAD_DRAM_HIT

# Counts the number of cycles the core is stalled due to a demand load miss which hit in the L2, LLC, DRAM or MMIO (Non-DRAM).
34.07 MEM_BOUND_STALLS.LOAD

# Counts the number of cycles the core is stalled due to an instruction cache or TLB miss which hit in the L2 cache.
34.08 MEM_BOUND_STALLS.IFETCH_L2_HIT

# Counts the number of cycles the core is stalled due to an instruction cache or TLB miss which hit in the LLC or other core with HITE/F/M.
34.10 MEM_BOUND_STALLS.IFETCH_LLC_HIT

# Counts the number of cycles the core is stalled due to an instruction cache or TLB miss which hit in DRAM or MMIO (Non-DRAM).
34.20 MEM_BOUND_STALLS.IFETCH_DRAM_HIT

# Counts the number of cycles the core is stalled due to an instruction cache or TLB miss which hit in the L2, LLC, DRAM or MMIO (Non-DRAM).
34.38 MEM_BOUND_STALLS.IFETCH

# Counts the number of unhalted core clock cycles.
3C.00 CPU_CLK_UNHALTED.CORE_P

# Counts the number of unhalted core clock cycles.
3C.00 CPU_CLK_UNHALTED.THREAD_P

# Counts the number of unhalted reference clock cycles at TSC frequency.
3C.01 CPU_CLK_UNHALTED.REF_TSC_P

# Counts the number of page walks completed due to store DTLB misses to any page size.
49.0E DTLB_STORE_MISSES.WALK_COMPLETED

# Counts the total number of issue slots every cycle that were not consumed by the backend due to frontend stalls.
71.00 TOPDOWN_FE_BOUND.ALL

# Counts the number of issue slots every cycle that were not delivered by the frontend due to the microcode sequencer (MS).
71.01 TOPDOWN_FE_BOUND.CISC

# Counts the number of issue slots every cycle that were not delivered by the frontend due to BACLEARS.
71.02 TOPDOWN_FE_BOUND.BRANCH_DETECT

# Counts the number of issue slots every cycle that were not delivered by the frontend due to wrong predecodes.
71.04 TOPDOWN_FE_BOUND.PREDECODE

# Counts the number of issue slots every cycle that were not delivered by the frontend due to decode stalls.
71.08 TOPDOWN_FE_BOUND.DECODE

# Counts the number of issue slots every cycle that were not delivered by the frontend due to ITLB misses.
71.10 TOPDOWN_FE_BOUND.ITLB

# Counts the number of issue slots every cycle that were not delivered by the frontend due to instruction cache misses.
71.20 TOPDOWN_FE_BOUND.ICACHE

# Counts the number of issue slots every cycle that were not delivered by the frontend due to BTCLEARS.
71.40 TOPDOWN_FE_BOUND.BRANCH_RESTEER

# Counts the number of issue slots every cycle that were not delivered by the frontend due to a latency related stalls including BACLEARs, BTCLEARs, ITLB misses, and ICache misses.
71.72 TOPDOWN_FE_BOUND.FRONTEND_LATENCY

# Counts the number of issue slots every cycle that were not delivered by the frontend due to other common frontend stalls not categorized.
71.80 TOPDOWN_FE_BOUND.OTHER

# Counts the number of issue slots every cycle that were not delivered by the frontend due to frontend bandwidth restrictions due to decode, predecode, cisc, and other limitations.
71.8D TOPDOWN_FE_BOUND.FRONTEND_BANDWIDTH

# Counts the total number of issue slots that were not consumed by the backend because allocation is stalled due to a mispredicted jump or a machine clear.
73.00 TOPDOWN_BAD_SPECULATION.ALL

# Counts the number of issue slots every cycle that were not consumed by the backend due to a machine clear (nuke).
73.01 TOPDOWN_BAD_SPECULATION.NUKE

# Counts the number of issue slots every cycle that were not consumed by the backend due to fast nukes such as memory ordering and memory disambiguation machine clears.
73.02 TOPDOWN_BAD_SPECULATION.FASTNUKE

# Counts the total number of issue slots that were not consumed by the backend because allocation is stalled due to a machine clear (nuke) of any kind including memory ordering and memory disambiguation.
73.03 TOPDOWN_BAD_SPECULATION.MACHINE_CLEARS

# Counts the number of issue slots every cycle that were not consumed by the backend due to branch mispredicts.
73.04 TOPDOWN_BAD_SPECULATION.MISPREDICT

# Counts the total number of issue slots every cycle that were not consumed by the backend due to backend stalls.
74.00 TOPDOWN_BE_BOUND.ALL

# Counts the number of issue slots every cycle that were not consumed by the backend due to certain allocation restrictions.
74.01 TOPDOWN_BE_BOUND.ALLOC_RESTRICTIONS

# Counts the number of issue slots every cycle that were not consumed by the backend due to memory reservation stalls in which a scheduler is not able to accept uops.
74.02 TOPDOWN_BE_BOUND.MEM_SCHEDULER

# Counts the number of issue slots every cycle that were not consumed by the backend due to IEC or FPC RAT stalls, which can be due to FIQ or IEC reservation stalls in which the integer, floating point or SIMD scheduler is not able to accept uops.
74.08 TOPDOWN_BE_BOUND.NON_MEM_SCHEDULER

# Counts the number of issue slots every cycle that were not consumed by the backend due to scoreboards from the instruction queue (IQ), jump execution unit (JEU), or microcode sequencer (MS).
74.10 TOPDOWN_BE_BOUND.SERIALIZATION

# Counts the number of issue slots every cycle that were not consumed by the backend due to the physical register file unable to accept an entry (marble stalls).
74.20 TOPDOWN_BE_BOUND.REGISTER

# Counts the number of issue slots every cycle that were not consumed by the backend due to the reorder buffer being full (ROB stalls).
74.40 TOPDOWN_BE_BOUND.REORDER_BUFFER

# Counts the number of issue slots not consumed by the backend due to a micro-sequencer (MS) scoreboard, which stalls the front-end from issuing from the UROM until a specified older uop retires.
75.02 SERIALIZATION.NON_C01_MS_SCB

# Counts the number of issue slots in a UMWAIT or TPAUSE instruction where no uop issues due to the instruction putting the CPU into the C0.1 activity state. For Tremont, UMWAIT and TPAUSE will only put the CPU into C0.1 activity state (not C0.2 activity state)
75.04 SERIALIZATION.C01_MS_SCB

# Counts the number of instruction cache misses.
80.02 ICACHE.MISSES

# Counts the number of requests to the instruction cache for one or more bytes of a cache line.
80.03 ICACHE.ACCESSES

# Counts the number of page walks initiated by a instruction fetch that missed the first and second level TLBs.
85.01 ITLB_MISSES.MISS_CAUSED_WALK

# Counts the number of page walks completed due to instruction fetch misses to any page size.
85.0E ITLB_MISSES.WALK_COMPLETED

# Counts the number of page walks due to an instruction fetch that miss the PDE (Page Directory Entry) cache.
85.80 ITLB_MISSES.PDE_CACHE_MISS

# Counts the total number of instructions retired.
C0.00 INST_RETIRED.ANY_P

# Counts the total number of consumed retirement slots.
C2.00 TOPDOWN_RETIRING.ALL

# Counts the total number of uops retired.
C2.00 UOPS_RETIRED.ALL

# Counts the number of uops that are from complex flows issued by the micro-sequencer (MS).
C2.01 UOPS_RETIRED.MS

# Counts the number of x87 uops retired, includes those in MS flows.
C2.02 UOPS_RETIRED.X87

# Counts the number of floating point divide uops retired (x87 and SSE, including x87 sqrt).
C2.08 UOPS_RETIRED.FPDIV

# Counts the number of integer divide uops retired.
C2.10 UOPS_RETIRED.IDIV

# Counts the number of machine clears due to program modifying data (self modifying code) within 1K of a recently fetched code page.
C3.01 MACHINE_CLEARS.SMC

# Counts the number of machine clears due to memory ordering caused by a snoop from an external agent. Does not count internally generated machine clears such as those due to memory disambiguation.
C3.02 MACHINE_CLEARS.MEMORY_ORDERING

# Counts the number of floating point operations retired that required microcode assist.
C3.04 MACHINE_CLEARS.FP_ASSIST

# Counts the number of machine clears due to memory ordering in which an internal load passes an older store within the same CPU.
C3.08 MACHINE_CLEARS.DISAMBIGUATION

# Counts the number of machine clears due to a page fault.  Counts both I-Side and D-Side (Loads/Stores) page faults.  A page fault occurs when either the page is not present, or an access violation occurs.
C3.20 MACHINE_CLEARS.PAGE_FAULT

# Counts the number of machines clears due to memory renaming.
C3.80 MACHINE_CLEARS.MRN_NUKE

# Counts the total number of branch instructions retired for all branch types.
C4.00 BR_INST_RETIRED.ALL_BRANCHES

# Counts the number of retired JCC (Jump on Conditional Code) branch instructions retired, includes both taken and not taken branches.
C4.7E BR_INST_RETIRED.COND

# Counts the number of far branch instructions retired, includes far jump, far call and return, and interrupt call and return.
C4.BF BR_INST_RETIRED.FAR_BRANCH

# Counts the number of near taken branch instructions retired.
C4.C0 BR_INST_RETIRED.NEAR_TAKEN

# Counts the number of near indirect JMP and near indirect CALL branch instructions retired.
C4.EB BR_INST_RETIRED.INDIRECT

# Counts the number of near RET branch instructions retired.
C4.F7 BR_INST_RETIRED.NEAR_RETURN

# Counts the number of near CALL branch instructions retired.
C4.F9 BR_INST_RETIRED.NEAR_CALL

# Counts the number of near indirect CALL branch instructions retired.
C4.FB BR_INST_RETIRED.INDIRECT_CALL

# Counts the number of near relative CALL branch instructions retired.
C4.FD BR_INST_RETIRED.REL_CALL

# Counts the number of taken JCC (Jump on Conditional Code) branch instructions retired.
C4.FE BR_INST_RETIRED.COND_TAKEN

# Counts the total number of mispredicted branch instructions retired for all branch types.
C5.00 BR_MISP_RETIRED.ALL_BRANCHES

# Counts the number of mispredicted JCC (Jump on Conditional Code) branch instructions retired.
C5.7E BR_MISP_RETIRED.COND

# Counts the number of mispredicted near taken branch instructions retired.
C5.80 BR_MISP_RETIRED.NEAR_TAKEN

# Counts the number of mispredicted near indirect JMP and near indirect CALL branch instructions retired.
C5.EB BR_MISP_RETIRED.INDIRECT

# Counts the number of mispredicted near RET branch instructions retired.
C5.F7 BR_MISP_RETIRED.RETURN

# Counts the number of mispredicted near indirect CALL branch instructions retired.
C5.FB BR_MISP_RETIRED.INDIRECT_CALL

# Counts the number of mispredicted taken JCC (Jump on Conditional Code) branch instructions retired.
C5.FE BR_MISP_RETIRED.COND_TAKEN

# Counts the number of active integer dividers per cycle.
CD.01 ARITH.IDIV_OCCUPANCY

# Counts the number of cycles any of the two integer dividers are active.
CD.01.CMSK=1 ARITH.IDIV_ACTIVE

# Counts the number of cycles the floating point divider is in the loop stage.
CD.02 ARITH.FPDIV_ACTIVE

# Counts the number of active floating point and integer dividers per cycle.
CD.03 ARITH.DIV_OCCUPANCY

# Counts the number of cycles when any of the floating point or integer dividers are active.
CD.03.CMSK=1 ARITH.DIV_ACTIVE

# Counts the number of integer divider uops executed per cycle.
CD.04 ARITH.IDIV_UOPS

# Counts the number of floating point divider uops executed per cycle.
CD.08 ARITH.FPDIV_UOPS

# Counts the number of floating point and integer divider uops executed per cycle.
CD.0C ARITH.DIV_UOPS

# Counts the number of tagged loads with an instruction latency that exceeds or equals the threshold of 16 cycles as defined in MEC_CR_PEBS_LD_LAT_THRESHOLD (3F6H). Only counts with PEBS enabled.
D0.05.MSR_3F6H=0x10.TakenAlone MEM_UOPS_RETIRED.LOAD_LATENCY_GT_16

# Counts the number of tagged loads with an instruction latency that exceeds or equals the threshold of 256 cycles as defined in MEC_CR_PEBS_LD_LAT_THRESHOLD (3F6H). Only counts with PEBS enabled.
D0.05.MSR_3F6H=0x100.TakenAlone MEM_UOPS_RETIRED.LOAD_LATENCY_GT_256

# Counts the number of tagged loads with an instruction latency that exceeds or equals the threshold of 32 cycles as defined in MEC_CR_PEBS_LD_LAT_THRESHOLD (3F6H). Only counts with PEBS enabled.
D0.05.MSR_3F6H=0x20.TakenAlone MEM_UOPS_RETIRED.LOAD_LATENCY_GT_32

# Counts the number of tagged loads with an instruction latency that exceeds or equals the threshold of 512 cycles as defined in MEC_CR_PEBS_LD_LAT_THRESHOLD (3F6H). Only counts with PEBS enabled.
D0.05.MSR_3F6H=0x200.TakenAlone MEM_UOPS_RETIRED.LOAD_LATENCY_GT_512

# Counts the number of tagged loads with an instruction latency that exceeds or equals the threshold of 4 cycles as defined in MEC_CR_PEBS_LD_LAT_THRESHOLD (3F6H). Only counts with PEBS enabled.
D0.05.MSR_3F6H=0x4.TakenAlone MEM_UOPS_RETIRED.LOAD_LATENCY_GT_4

# Counts the number of tagged loads with an instruction latency that exceeds or equals the threshold of 64 cycles as defined in MEC_CR_PEBS_LD_LAT_THRESHOLD (3F6H). Only counts with PEBS enabled.
D0.05.MSR_3F6H=0x40.TakenAlone MEM_UOPS_RETIRED.LOAD_LATENCY_GT_64

# Counts the number of tagged loads with an instruction latency that exceeds or equals the threshold of 8 cycles as defined in MEC_CR_PEBS_LD_LAT_THRESHOLD (3F6H). Only counts with PEBS enabled.
D0.05.MSR_3F6H=0x8.TakenAlone MEM_UOPS_RETIRED.LOAD_LATENCY_GT_8

# Counts the number of tagged loads with an instruction latency that exceeds or equals the threshold of 128 cycles as defined in MEC_CR_PEBS_LD_LAT_THRESHOLD (3F6H). Only counts with PEBS enabled.
D0.05.MSR_3F6H=0x80.TakenAlone MEM_UOPS_RETIRED.LOAD_LATENCY_GT_128

# Counts the number of stores uops retired. Counts with or without PEBS enabled.
D0.06 MEM_UOPS_RETIRED.STORE_LATENCY

# Counts the number of load ops retired that miss in the second Level TLB.
D0.11 MEM_UOPS_RETIRED.STLB_MISS_LOADS

# Counts the number of store ops retired that miss in the second level TLB.
D0.12 MEM_UOPS_RETIRED.STLB_MISS_STORES

# Counts the total number of load and store uops retired that missed in the second level TLB.
D0.13 MEM_UOPS_RETIRED.STLB_MISS

# Counts the number of load uops retired that performed one or more locks.
D0.21 MEM_UOPS_RETIRED.LOCK_LOADS

# Counts the number of retired split load uops.
D0.41 MEM_UOPS_RETIRED.SPLIT_LOADS

# Counts the number of load uops retired.
D0.81 MEM_UOPS_RETIRED.ALL_LOADS

# Counts the number of store uops retired.
D0.82 MEM_UOPS_RETIRED.ALL_STORES

# Counts the number of load uops retired that hit in the L1 data cache.
D1.01 MEM_LOAD_UOPS_RETIRED.L1_HIT

# Counts the number of load uops retired that hit in the L2 cache.
D1.02 MEM_LOAD_UOPS_RETIRED.L2_HIT

# Counts the number of load uops retired that hit in the L3 cache.
D1.04 MEM_LOAD_UOPS_RETIRED.L3_HIT

# Counts the number of load uops retired that miss in the L1 data cache.
D1.08 MEM_LOAD_UOPS_RETIRED.L1_MISS

# Counts the number of load uops retired that miss in the L2 cache.
D1.10 MEM_LOAD_UOPS_RETIRED.L2_MISS

# Counts the number of load uops retired that hit in the L3 cache, in which a snoop was required and modified data was forwarded from another core or module.
D1.20 MEM_LOAD_UOPS_RETIRED.HITM

# Counts the number of load uops retired that hit in DRAM.
D1.80 MEM_LOAD_UOPS_RETIRED.DRAM_HIT

# Counts the number of load uops retired that miss in the L3 cache.
D2.20 MEM_LOAD_UOPS_RETIRED_MISC.L3_MISS

# Counts the number of load uops retired that hit in the L3 cache, in which a snoop was required, and non-modified data was forwarded.
D2.40 MEM_LOAD_UOPS_RETIRED_MISC.HIT_E_F

# Counts the number of LBR entries recorded. Requires LBRs to be enabled in IA32_LBR_CTL. [This event is alias to LBR_INSERTS.ANY]
E4.01 MISC_RETIRED.LBR_INSERTS

# Counts the total number of BACLEARS due to all branch types including conditional and unconditional jumps, returns, and indirect branches.
E6.01 BACLEARS.ANY
